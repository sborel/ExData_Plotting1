x<-1:10
vvv <- c(name1=x,name2=4)
vvv
vvv <- c(name=x,names=4)
vvv
vvv <- c(name=x,last=11:20)
vvv
vvv <- cbind(name=x,last=11:20)
vvv
nxt()
identical(vect,vect2)
vect[bar]
vect[2]
vect["bar"]
vect[c("foo","bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
View(my_vector)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix (1:20,4,5)
identical(my_matrix,mymatrix2)
identical(my_matrix,my_matrix2)
patients <- c("Bill", "Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating","test")
colnames(my_data,colnames)
?colnames
colnames(my_data)<- cnames
my_data
T==T
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
!(5==7)
FALSE&FLASE
FALSE&FALSE
TRUE & C(TRUE,FALSE,FALSE)
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
6 >= -9 && !(6 > 7) && !(!TRUE)
6 >= -9 && !(6 > 7)
isTRUE(6>4)
indentical('twins','twins')
identical('twins','twins')
xor(5==6,FALSE)
xor(5==6,!FALSE)
ints <- sample(10)
ints
ints >5
?which
which(ints)
which(ints>5)
which(ints>7)
any(ints<0)
all(ints>0)
Sys.date()
sys.date()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div=2)
args(remainder)
submit()
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
avaluate(func(x){x[1]},c(8,4,0))
evaluate(func(x){x[1]},c(8,4,0))
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[1]},c(8,4,0))
length(function(x){x[1]})
skip()
?paste
paste("Programming", "is", "fun!")
submit()
telegram("I","am")
submit()
mad_lib("beach","blue","sun")
mad_libs("beach","blue","sun")
submit
submit()
"I" %p% "love" %p% "R!"
View(flags)
head(flags)
dim(flags)
viewinfo()
class(flags)
as.list(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags,class)
cls_vect
clas(cls_vector)
class(cls_vector)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
names(flag_colors)
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_color,mean)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
names(flag_shapes)
lapply(flag_shapes,range)
sapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
c<-NULL
c
clear()
library(datasets)
data(iris)
?iris
iris
iris.c1 <- subset(iris,select = Sepal.Length, Species == virginica)
iris.c1 <- subset(iris,select = Sepal.Length, Species == "virginica")
View(iris.c1)
mean(iris.c1)
mean(iris.c1[,Sepal.Length])
mean(iris.c1[,Sepal.Length])
names(iris.c1)
iris.c1[,Sepal.Length]
iris.c1[,"Sepal.Length"]
mean(iris.c1[,"Sepal.Length"])
names(iris)
apply(iris, 2, mean)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
data(mtcars)
?mtcars
names(mtcars)
View(mtcars)
View(mtcars)
x <- c(rnorm(10), runif(10), rnorm(10, 1))
x
rnorm(10)
tapply(mtcars$cyl, mtcars$mpg, mean)
View(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
lapply(mtcars, mean)
sapply(mtcars,mean)
mean(mtcars$mpg, mtcars$cyl)
names(mtcars)
m1 <- tapply(mtcars$hp,mtcars$cyl,mean)
m1
m1[1]-m1[3]
debug(ls)
ls
library(swirl)
swirl()
dim(flags)
play()
head(flags)
str(flags)
?str
summary(flags)
nxt()
unique(flags)
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,summary)
tapply(flags$poluation,flags$landmass,summary)
tapply(flags$polulation,flags$landmass,summary)
tapply(flags$population,flags$landmass,summary)
ls()
class(plants)
dim(plants)
nrows(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
str(plants)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
library(swirl)
swirl()
swirl()
?sample
sample(1:6,4,replace=TRUE)
sample(1:6,4,replace=TRUE)
6^4
sample(1:20,10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
flips
table(flips)
sum(flips)
?rbinom
rbinom(1,100,0.7)
rbinom(1,100,0.7)
flips2<-rbinom(100,1,0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,100,25)
?rpois
rpois(5,10)
my_pois <- replicate(100,rpois(5,10))
my_pois
dim(my_pois)
cm <- colMeans(my_pois)
hist(cm)
package(swirl)
library(swirl)
swirl()
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed,y=cars$dist)
plot(x=cars$dist,y=cars$speed)
plot(x=cars$speed,y=cars$dist,xlab = "speed")
plot(x=cars$speed,y=cars$dist,xlab = "Speed")
plot(x=cars$speed,y=cars$dist,xlab = "Speed",ylab="Stopping Distance")
plot(x=cars$speed,y=cars$dist,ylab="Stopping Distance")
plot(x=cars$speed,y=cars$dist,xlab = "Speed",ylab="Stopping Distance")
plot(cars,main="My Plot")
plot(cars,main="My Plot",sub="My Plot Subtitle")
plot(cars,sub="My Plot Subtitle")
plot(cars,col=2)
plot(cars,col=2)
plot(cars,xlim=c(10,15))
plot(cars,pch=2)
load(mtcars)
load("mtcars")
data(mtcars)
play()
dim(mtcars)
names(mtcars)
?mtcars
nxt()
?boxplot
boxplot(mpg~cyl,mtcars)
hist(mtcars$mpg)
install_from_swirl("Getting and Cleaning Data")
?subset
R.version.string
library(swirl)
swirl()
path2csv
read.csv(path2csv,stringsAsFactors = F)
mydf <- read.csv(path2csv,stringsAsFactors = F)
mydf <- read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageversion("dplyr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
cran
?select
select(cran,ip_id,package,country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country =="US")
?Comparison
filter(cran, r_version <= "3.0.2", country =="IN")
filter(cran, country =="US"|country =="IN")
filter(cran,size>100500,r_os=="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,r_version!=NA)
filter(cran,!is.na(r_version)
)
cran2 <-select(cran, size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id)
)
arrange(cran2, package, ip_id)
arrange(cran2,country, desc(R_version), ip_id)
arrange(cran2,country, desc(r_version), ip_id)
cran3 <- select(cran2, ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
2^20
mutate(cran3, size_mb = size/2^20)
mutate(cran3, size_mb = size/2^20, size_gb = size_mb/2^10
)
mutate(cran3, correct_size = size+1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package(cran, package)
by_package <- groupby(cran, package)
by_package <- group_by(cran, package)
by_package
summarize(by_package,mean(size))
submit()
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
sum(packsum$count)
sum(pack_sum$count)
679.56/225468
top_counts <- filter(pack_sum,count>679)
top_counts
view(top_counts)
View(top_counts)
top_counts_sorted <- arrange(top_counts, count)
top_counts_sorted <- arrange(top_counts, desc(count)
)
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique>465)
View(top_unique)
arrange(top_unique,sec(unique)
)
arrange(top_unique,desc(unique))
top_unique_sorted <- arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
res <- gather(students2, sex_class, value, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res,sex_class, c("sex","class"), sep="_")
separate(res,sex_class, c("sex","class"))
submit()
students3
submit()
?spread
submit()
submit()
submit()
submit
submit()
submit()
extract_numeric("class5")
submit()
student4
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed,status = "passed")
failed = mutate(failed, status ="failed")
failed <- failed %>% mutate(status ="failed")
bind_rows(passed,failed)
sat
submit()
submit()
submit()
library(swirl)
swirl
swirl()
skip()
dim(mydf)
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
dim(mydf)
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
dim(mydf)
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
dim(mydf)
skip()
skip()
by_package
summarize(by_package,mean(size))
skip()
pack_sum
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
load(chicago)
chicago <- data(chicago)
df <- data.frame(chicago)
View(df)
library(dplyr)
source('~/Coursera/Exploratory Data Analysis/Project 1/ExData_Plotting1/plot3.R')
setwd("~/Coursera/Exploratory Data Analysis/Project 1/ExData_Plotting1")
source('~/Coursera/Exploratory Data Analysis/Project 1/ExData_Plotting1/plot3.R')
rm(data.sub1)
plot(data$datetime,data$Sub_metering_1,
type = "l",
xlab = "",
ylab = "Energy sub metering")
lines(data$datetime,data$Sub_metering_2, col="red")
lines(data$datetime,data$Sub_metering_3, col="blue")
legend('topright',c('Sub_metering_1','Sub_metering_2','Sub_metering_3'))
